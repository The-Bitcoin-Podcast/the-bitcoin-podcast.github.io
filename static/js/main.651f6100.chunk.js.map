{"version":3,"sources":["containers/EthContainer.js","containers/CryptoContainer.js","components/Welcome.js","containers/BtcContainer.js","containers/LtcContainer.js","components/Leaderboard.js","components/Totals.js","App.js","serviceWorker.js","index.js"],"names":["myweb3","ethTotal","ltcTotal","btcTotal","Welcome","react_default","a","createElement","Component","ethContainerStyle","css","background","qrCodeStyle","padding","width","height","justifySelf","formStyle","donationNetworkID","donationAddress","apiKey","etherscanApiLinks","extTx","intTx","EthContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getAccountData","fetchCalls","fetch","concat","Promise","all","then","res","map","apiCall","json","responseJson","_concat","apply","toConsumableArray","result","processEthList","ethlist","filteredEthList","obj","value","Math","pow","reduce","acc","cur","isError","from","toLowerCase","input","hash","currency","rank","usd_value","push","keys","val","sort","b","index","onTxChange","componentDidMount","window","web3","currentProvider","Web3","eth","defaultAccount","setState","candonate","transactionsArray","componentDidUpdate","prevProps","price","console","log","handleDonate","event","preventDefault","form","target","donateWei","utils","BN","toWei","elements","message","toHex","extraGas","length","net","getId","netId","getAccounts","accounts","sendTransaction","to","gas","data","catch","e","donateenabled","state","searchTerm","socketconnected","totalAmount","className","Header","as","Grid","divided","Row","columns","Column","lib_default","renderAs","fgColor","bgColor","href","Form","onSubmit","type","placeholder","name","Button","btcContainerStyle","apiLinks","blockcypher","btccom","BtcContainer","btcList","list","processBtcComList","txns","filteredBtcList","inputs","prev_addresses","parseFloat","outputs_value","ltcContainerStyle","blockcypherApiLinks","LtcContainer","ltcList","txrefs","processLtcList","filteredLtcList","tx_hash","Leaderboard","hex_to_ascii","str1","hex","toString","str","n","String","fromCharCode","parseInt","substr","_this2","Container","fluid","Table","color","striped","padded","size","HeaderCell","Body","item","key","Cell","toPrecision","react_emojione_default","txHash","Totals","_this$props$totals","totals","ltc","btc","_this$props$prices","prices","ETH","LTC","BTC","Segment","inverted","textAlign","toFixed","coinsApiBase","coinsApiLinks","CryptoContainer","getCoinPrices","bases","x","ticker","base","baseprices","o","k","i","objectSpread","defineProperty","gettingData","handleReindex","handleTxChange","ethTxns","oldTotals","oldTxns","ltcTxns","btcTxns","componentWillMount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","stop","bind","assertThisInitialized","panes","menuItem","pane","active","content","containers_EthContainer","containers_BtcContainer","containers_LtcContainer","components_Totals","Tab","menu","vertical","renderActiveOnly","components_Leaderboard","App","components_Welcome","containers_CryptoContainer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.651f6100.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport QRCode from 'qrcode.react'\nimport { css } from \"glamor\"\nimport Web3 from 'web3'\nimport { Grid, Button, Form, Header } from 'semantic-ui-react'\n\nlet ethContainerStyle = css({\n    background: '#ffffffff',\n})\n\nlet qrCodeStyle = css({\n    padding: '1rem',\n    width: '300',\n    height: '300',\n    justifySelf: 'end',\n})\n\nlet formStyle = css({\n    padding: '1rem',\n})\n\nconst donationNetworkID = 1; // make sure donations only go through on this network.\n// const donationAddress = \"0x0Ab4d7d50f36A168EbA567b07BbB7D1Ad3372A86\"; //replace with the address to watch\nconst donationAddress = \"0x0Ab4d7d50f36A168EbA567b07BbB7D1Ad3372A86\" //replace with the address to watch\nconst apiKey = \"SC1H6JHAK19WC1D3BGV3JWIFD983E7BS58\"; //replace with your own key\nlet myweb3\n\nconst etherscanApiLinks = {\n  extTx:\n    \"https://api.etherscan.io/api?module=account&action=txlistinternal&address=\" +\n    donationAddress +\n    \"&startblock=0&endblock=99999999&sort=asc&apikey=\" +\n    apiKey,\n  intTx:\n    \"https://api.etherscan.io/api?module=account&action=txlist&address=\" +\n    donationAddress +\n    \"&startblock=0&endblock=99999999&sort=asc&apikey=\" +\n    apiKey\n};\n\nclass EthContainer extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            ethlist: [],\n            searchTerm: \"\",\n            donateenabled: true,\n            socketconnected: false,\n            totalAmount: 0,\n            price: 0\n        };\n    }\n\n    getAccountData = () => {\n        let fetchCalls = [\n            fetch(`${etherscanApiLinks.extTx}`),\n            fetch(`${etherscanApiLinks.intTx}`)\n        ];\n        return Promise.all(fetchCalls)\n            .then(res => {\n                return Promise.all(res.map(apiCall => apiCall.json()));\n            })\n            .then(responseJson => {\n                return [].concat.apply(...responseJson.map(res => res.result));\n            });\n    };\n\n    processEthList = ethlist => {\n        let filteredEthList = ethlist\n            .map(obj => {\n                obj.value = obj.value / 10**18\n                return obj;\n            })\n        // .filter(obj => {\n        //   return obj.value.cmp(new myweb3.utils.BN(0));\n        // }) // filter out zero-value transactions\n            .reduce((acc, cur) => {\n            // group by address and sum tx value\n                if (cur.isError !== \"0\") {\n                    // tx was not successful - skip it.\n                    return acc;\n                }\n                if (cur.from === donationAddress.toLowerCase()) {\n                    // tx was outgoing - don't add it in\n                    return acc;\n                }\n                if (typeof acc[cur.from] === \"undefined\") {\n                    acc[cur.from] = {\n                        from: cur.from,\n                        value: 0,\n                        input: cur.input,\n                        hash: [],\n                        currency: 'ETH',\n                        rank: 0,\n                        usd_value: 0\n                    };\n                }\n                acc[cur.from].value = cur.value + acc[cur.from].value;\n                acc[cur.from].input =\n                    cur.input !== \"0x\" && cur.input !== \"0x00\"\n                        ? cur.input\n                        : acc[cur.from].input;\n                acc[cur.from].hash.push(cur.hash);\n                return acc;\n        }, {});\n        filteredEthList = Object.keys(filteredEthList)\n            .map(val => filteredEthList[val])\n            .sort((a, b) => {\n                // sort greatest to least\n                return b.value - a.value\n        })\n        .map((obj, index) => {\n            // add rank\n            obj.rank = index + 1;\n            return obj;\n        });\n        return this.props.onTxChange('eth', filteredEthList)\n    }\n    \n    componentDidMount = () => {\n        if (\n            typeof window.web3 !== \"undefined\" &&\n            typeof window.web3.currentProvider !== \"undefined\"\n        ) {\n            myweb3 = new Web3(window.web3.currentProvider);\n            myweb3.eth.defaultAccount = window.web3.eth.defaultAccount;\n            this.setState({\n            candonate: true\n            });\n        } else {\n            // I cannot do transactions now.\n            this.setState({\n            candonate: false\n            });\n            myweb3 = new Web3();\n        }\n\n        this.getAccountData().then(res => {\n            this.setState(\n            {\n                transactionsArray: res\n            },\n            () => {\n                this.processEthList(res)\n            }\n        )})\n    }\n\n    componentDidUpdate = (prevProps) => {\n        if (!prevProps.price === this.props.price) {\n            console.log(this.props.price)\n            this.setState({\n                price: this.props.price\n            })\n            this.getAccountData().then(res => {\n                this.setState(\n                {\n                    transactionsArray: res\n                },\n                () => {\n                    this.processEthList(res)\n                }\n            )})   \n        }\n    }\n\n    handleDonate = event => {\n        event.preventDefault();\n        const form = event.target;\n        let donateWei = new myweb3.utils.BN(\n             myweb3.utils.toWei(form.elements[\"amount\"].value, \"ether\")\n        );\n        let message = myweb3.utils.toHex(form.elements[\"message\"].value);\n        let extraGas = form.elements[\"message\"].value.length * 68;\n    \n        myweb3.eth.net.getId().then(netId => {\n            switch (netId) {\n                case 1:\n                    console.log(\"Metamask is on mainnet\");\n                    break;\n                case 2:\n                    console.log(\"Metamask is on the deprecated Morden test network.\");\n                    break;\n                case 3:\n                    console.log(\"Metamask is on the ropsten test network.\");\n                    break;\n                case 4:\n                    console.log(\"Metamask is on the Rinkeby test network.\");\n                    break;\n                case 42:\n                    console.log(\"Metamask is on the Kovan test network.\");\n                    break;\n                default:\n                    console.log(\"Metamask is on an unknown network.\");\n            }\n            if (netId === donationNetworkID) {\n                return myweb3.eth.getAccounts().then(accounts => {\n                    return myweb3.eth\n                        .sendTransaction({\n                        from: accounts[0],\n                        to: donationAddress,\n                        value: donateWei,\n                        gas: 150000 + extraGas,\n                        data: message\n                    })\n                    .catch(e => {\n                        console.log(e);\n                     });\n                });\n            } else {\n                console.log(\"no donation allowed on this network\");\n                this.setState({\n                    donateenabled: false\n                });\n            }\n        });\n    };\n\n    render() {\n        return <div className={`${ethContainerStyle}`} >\n            <Header as=\"h2\">Ethereum</Header>\n            <Grid divided='vertically'>\n                <Grid.Row columns={2} className={`${ethContainerStyle}`}>\n                <Grid.Column className={`${ethContainerStyle}`}>\n                    <h4>Privately: Send directly to the donation address</h4>  \n                    <QRCode\n                        className={`${qrCodeStyle}`}\n                        renderAs=\"svg\"\n                        fgColor=\"#000000\"\n                        bgColor=\"#89e5ff00\"\n                        value={donationAddress}\n                    />\n                    <h4>{donationAddress}</h4>\n                </Grid.Column>\n                <Grid.Column className={`${ethContainerStyle}`}>\n                    <div className={`${ethContainerStyle}`}>\n                        <h4 >\n                            {`Publicly: Send a transaction via `}\n                            <a href=\"https://metamask.io\">Metamask</a>\n                            {` with your name (or something else) as a message `} \n                        </h4>\n                        <h4>All donations with the same address will be added together.</h4>\n                        <Form  onSubmit={this.handleDonate} className={`${formStyle}`}>\n                            <input\n                                type=\"text\"\n                                placeholder=\"ETH to donate\"\n                                name=\"amount\"\n                            />\n                            <input type=\"text\" placeholder=\"message\" name=\"message\" />\n                            <Button className=\"Button\">Send</Button>\n                        </Form>\n                    </div>\n                </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </div>\n      }\n}\n\nexport default EthContainer","import React, { Component } from 'react'\nimport { Tab, Header } from 'semantic-ui-react'\nimport EthContainer from './EthContainer'\nimport BtcContainer from './BtcContainer'\nimport LtcContainer from './LtcContainer'\nimport Leaderboard from '../components/Leaderboard'\nimport Totals from '../components/Totals';\n\nlet ethTotal, ltcTotal, btcTotal\n\nconst coinsApiBase = 'https://api.cryptonator.com/api/ticker/'\nconst coinsApiLinks = {\n    eth: `${coinsApiBase}eth-usd`,\n    ltc: `${coinsApiBase}ltc-usd`,\n    btc: `${coinsApiBase}btc-usd`,\n}\n\nclass CryptoContainer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            txns: [],\n            totals: {},\n            prices: {},\n            gettingData: true,\n        }\n        this.handleReindex = this.handleReindex.bind(this)\n    }\n\n    getCoinPrices = () => {\n        let fetchCalls = [\n            fetch(`${coinsApiLinks.btc}`),\n            fetch(`${coinsApiLinks.eth}`),\n            fetch(`${coinsApiLinks.ltc}`),\n        ];\n        Promise.all(fetchCalls)\n            .then(res => {\n                return Promise.all(res.map(apiCall => apiCall.json()));\n            })\n            .then(responseJson => {\n                const bases = responseJson.map(x => x.ticker.base)\n                const prices = responseJson.map(x => x.ticker.price)\n                const baseprices = bases.reduce((o, k, i) => ({...o, [k]: prices[i]}), {})\n                this.setState({\n                    prices: {\n                        ...baseprices,\n                    },\n                    gettingData: false,\n                })\n            });\n    };\n\n    handleReindex = (txns) => {\n        txns = Object.keys(txns)\n            .map(val => txns[val])\n            .sort((a, b) => {\n                // sort greatest to least\n                return b.usd_value - a.usd_value\n        })\n        .map((obj, index) => {\n            // add rank\n            obj.rank = index + 1;\n            return obj;\n        });\n        return this.setState({\n            txns\n        })\n    }\n\n    // TODO: this will have to change to not replace the txns, \n    // but add to them and not duplicate\n    handleTxChange = (currency, txns) => {\n        if (currency === 'eth') {\n            let ethTxns = txns.map(obj => {\n                obj.usd_value = parseFloat(parseFloat(this.state.prices.ETH) * parseFloat(obj.value)).toFixed(2)\n                return obj\n            })\n            ethTotal = txns.reduce((acc, cur) => {\n                return acc + cur.value;\n            }, 0)\n            ethTotal = parseFloat(ethTotal).toFixed(2)\n            let oldTotals = this.state.totals\n            let oldTxns = this.state.txns\n            this.setState({\n                txns: [\n                    ...ethTxns,\n                    ...oldTxns\n                ],\n                totals: {\n                    eth: ethTotal,\n                    ...oldTotals\n                }\n            })\n            this.handleReindex([\n                ...txns,\n                ...oldTxns\n            ])\n        } else if (currency === 'ltc') {\n            let ltcTxns = txns.map(obj => {\n                obj.usd_value = parseFloat(parseFloat(this.state.prices.LTC) * parseFloat(obj.value)).toFixed(2)\n                return obj\n            })\n            ltcTotal = txns.reduce((acc, cur) => {\n                return acc + cur.value\n            }, 0)\n            ltcTotal = parseFloat(ltcTotal).toFixed(2)\n            let oldTotals = this.state.totals\n            let oldTxns = this.state.txns\n            this.setState({\n                txns: [\n                    ...ltcTxns,\n                    ...oldTxns\n                ],\n                totals: {\n                    ltc: ltcTotal,\n                    ...oldTotals,\n                }\n            })\n            this.handleReindex([\n                ...txns,\n                ...oldTxns\n            ])\n        } else if (currency === 'btc') {\n            let btcTxns = txns.map(obj => {\n                obj.usd_value = parseFloat(parseFloat(this.state.prices.BTC) * parseFloat(obj.value)).toFixed(2)\n                return obj\n            })\n            btcTotal = txns.reduce((acc, cur) => {\n                return acc + cur.value\n            }, 0)\n            btcTotal = parseFloat(btcTotal).toFixed(5)\n            let oldTotals = this.state.totals\n            let oldTxns = this.state.txns\n            this.setState({\n                txns: [\n                    ...btcTxns,\n                    ...oldTxns,\n                ],\n                totals: {\n                    btc: btcTotal,\n                    ...oldTotals,\n                },\n            })\n            this.handleReindex([\n                ...txns,\n                ...oldTxns\n            ])\n        }\n\n    }\n\n    componentWillMount = async () => {\n        await this.getCoinPrices()\n    }\n\n    render() {\n        if (this.state.gettingData) {\n            return <Header as='h2'>Retrieving Data...</Header>\n        }\n        let panes = [\n            { menuItem: 'ETH', pane: {\n                active: true, \n                content: <EthContainer onTxChange={this.handleTxChange} />, key: 1 }},\n            { menuItem: 'BTC', pane: {\n                content: <BtcContainer onTxChange={this.handleTxChange} />, key: 2 }},\n            { menuItem: 'LTC', pane: {\n                content: <LtcContainer onTxChange={this.handleTxChange} />, key: 3 }},\n        ]\n        return <div>\n            <hr />\n            <Totals totals={this.state.totals} prices={this.state.prices} />\n            <hr />\n            <Header as='h2'>Choose a currency to donate.</Header>\n            <Tab menu={{ fluid: true, vertical: false, color:'orange', inverted: true}} panes={panes} renderActiveOnly={false} />\n            <Leaderboard txns={this.state.txns} />\n        </div>\n    }\n}\n\nexport default CryptoContainer","import React, { Component } from 'react'\n\nclass Welcome extends Component {\n    render() {\n        return <div>\n            <h1>Donate to The Bitcoin Podcast Network</h1>\n            <h4>\n            {`Welcome to The Bitcoin Podcast Donation Page.  We have done this as a hobby for many years and appreciate any \n            contribution you can make to help us continue delivering quality content. `}\n            </h4>\n            <h4>\n            {`Keep your eyes peeled to this website, this is the first of many improvements on how you can throw money at us!  \n            We'll be incorporating other chains and functionalities to allow you to play with new capabilities of blockchain tech, \n            all while helping TBPN grow.  `}\n            </h4>\n            <h4>\n            {`Thank you for your support and making \n            The Bitcoin Podcast Network grow! `}\n            </h4>\n        </div>\n    }\n}\n\nexport default Welcome","import React, { Component } from 'react'\nimport QRCode from 'qrcode.react'\nimport { css } from \"glamor\"\nimport { Header } from 'semantic-ui-react';\n\nlet btcContainerStyle = css({\n    background: '#ffffffff',\n})\n\nlet qrCodeStyle = css({\n    padding: '1rem',\n    width: '300',\n    height: '300',\n    justifySelf: 'end',\n})\n\nconst donationAddress = \"3E4vFyDB4wCSoRfbqwNvKoNXw3ADKbBxBX\"; //replace with the address to watch\n// const donationAddress = \"3CxLwST9RZY4NXTAarNjgoTtoD8tR3cKxv\"; //replace with the address to watch\nconst apiLinks = {\n    blockcypher: \"https://api.blockcypher.com/v1/btc/main/addrs/\" + donationAddress,\n    btccom: `https://chain.api.btc.com/v3/address/${donationAddress}/tx`,\n}\n\nclass BtcContainer extends Component {\n    state = {\n        btcList: []\n    }\n\n    getAccountData = () => {\n        let fetchCalls = [\n            // fetch(`${apiLinks.blockcypher}`, {'mode': 'no-cors'}),\n            fetch(`${apiLinks.btccom}`),\n        ];\n        return Promise.all(fetchCalls)\n            .then(res => {\n                return Promise.all(res.map(apiCall => apiCall.json()));\n            })\n            .then(responseJson => {\n                return responseJson[0].data.list ? [].concat.apply(responseJson[0].data.list) : []\n            })\n    };\n\n    processBtcComList = (txns) => {\n        // Create list of Urls based on tx_hashes\n        let filteredBtcList = txns.map(\n            obj => {\n                obj.input = '0x'\n                return obj\n            })\n            .reduce((acc, cur) => {\n                // group by address and sum tx value\n                if (typeof acc[cur.hash] === \"undefined\") {\n                    acc[cur.hash] = {\n                        from: cur.inputs[0].prev_addresses[0],\n                        value: 0,\n                        input: cur.input,\n                        hash: [],\n                        currency: 'BTC'\n                    };\n                }\n                acc[cur.hash].value = parseFloat(cur.outputs_value / 10**8)\n                acc[cur.hash].input =\n                    cur.input !== \"0x\" && cur.input !== \"0x00\"\n                        ? cur.input\n                        : acc[cur.hash].input;\n                acc[cur.hash].hash.push(cur.hash);\n                return acc;\n            }, {});\n        filteredBtcList = Object.keys(filteredBtcList)\n            .map(val => filteredBtcList[val])\n        .map((obj, index) => {\n            // add rank\n            obj.rank = index + 1;\n            return obj;\n        });\n        return this.props.onTxChange('btc', filteredBtcList)\n    }\n\n    componentDidMount = () => {\n        this.getAccountData().then(res => {\n            this.setState(\n            {\n                transactionsArray: res\n            },\n            () => {\n                // this.processBtcList(res)\n                this.processBtcComList(res)\n            }\n        )})\n    }\n\n    render() {\n        return <div className={`${btcContainerStyle}`}>\n            <Header as=\"h2\">Bitcoin</Header>\n            <h4>Privately: Send directly to the donation address</h4>\n            <QRCode\n                className={`${qrCodeStyle}`}\n                renderAs=\"svg\"\n                fgColor=\"#000000\"\n                bgColor=\"#89e5ff00\"\n                value={donationAddress}\n            />\n            <h4>{donationAddress}</h4>\n\n        </div>\n      }\n}\n\nexport default BtcContainer","import React, { Component } from 'react'\nimport QRCode from 'qrcode.react'\nimport { css } from \"glamor\"\nimport { Header } from 'semantic-ui-react';\n\nlet ltcContainerStyle = css({\n    background: '#ffffffff',\n})\n\nlet qrCodeStyle = css({\n    padding: '1rem',\n    width: '300',\n    height: '300',\n    justifySelf: 'end',\n})\n\nconst donationDisplay = \"MGbRJcpJEJMAFXstTVmWx2JCrt2L4EKAEx\"\nconst donationAddress = \"3APGzjQLHBVjT2bzMcnB8P3oYBRt2EHgbj\"; //replace with the address to watch\nconst blockcypherApiLinks = {\n    txns: \"https://api.blockcypher.com/v1/ltc/main/addrs/\" + donationAddress\n}\n\n\n\nclass LtcContainer extends Component {\n    state = {\n        ltcList: []\n    }\n\n    getAccountData = () => {\n        let fetchCalls = [\n            // fetch(`${blockcypherApiLinks.txns}`, {'mode': 'no-cors'}),\n            fetch(`${blockcypherApiLinks.txns}`),\n        ];\n        return Promise.all(fetchCalls)\n            .then(res => {\n                return Promise.all(res.map(apiCall => apiCall.json()));\n            })\n            .then(responseJson => {\n                return responseJson[0].txrefs ? [].concat.apply(responseJson[0].txrefs) : []\n            })\n    };\n\n    processLtcList = (txns) => {\n        // Create list of Urls based on tx_hashes\n        \n        let filteredLtcList = txns.map(\n            obj => {\n                obj.input = '0x'\n                return obj\n            })\n            .reduce((acc, cur) => {\n                // group by address and sum tx value\n                if (typeof acc[cur.tx_hash] === \"undefined\") {\n                    acc[cur.tx_hash] = {\n                        from: \"Don't know, LTC blockexplorers suck\",\n                        value: 0,\n                        input: cur.input,\n                        hash: [],\n                        currency: 'LTC'\n                    };\n                }\n                acc[cur.tx_hash].value = parseFloat(cur.value  / 10**8)\n                acc[cur.tx_hash].input =\n                    cur.input !== \"0x\" && cur.input !== \"0x00\"\n                        ? cur.input\n                        : acc[cur.tx_hash].input;\n                acc[cur.tx_hash].hash.push(cur.tx_hash);\n                return acc;\n            }, {});\n        filteredLtcList = Object.keys(filteredLtcList)\n            .map(val => filteredLtcList[val])\n            .sort((a, b) => {\n                // sort greatest to least\n                return b.value - a.value\n        })\n        .map((obj, index) => {\n            // add rank\n            obj.rank = index + 1;\n            return obj;\n        });\n        return this.props.onTxChange('ltc', filteredLtcList)\n    }\n\n    componentDidMount = () => {\n        this.getAccountData().then(res => {\n            this.setState(\n            {\n                transactionsArray: res\n            },\n            () => {\n                this.processLtcList(res)\n            }\n        )})\n    }\n\n    render() {\n        return <div className={`${ltcContainerStyle}`}>\n            <Header as='h2'>Litecoin</Header>\n            <h4>Privately: Send directly to the donation address</h4>\n            <QRCode\n                className={`${qrCodeStyle}`}\n                renderAs=\"svg\"\n                fgColor=\"#000000\"\n                bgColor=\"#89e5ff00\"\n                value={donationDisplay}\n            />\n            <Header as='h4'>{donationDisplay}</Header>\n\n        </div>\n      }\n}\n\nexport default LtcContainer","import React, { Component } from 'react'\nimport Emojify from 'react-emojione'\nimport { Table, Header, Container } from 'semantic-ui-react'\n\nclass Leaderboard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            txns: this.props.txns\n        }\n    }\n\n\n    hex_to_ascii = (str1) => {\n        var hex  = str1.toString();\n        var str = '';\n        for (var n = 0; n < hex.length; n += 2) {\n            str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n        }\n        return str;\n    }\n\n    componentDidUpdate = (prevProps) => {\n        if (prevProps.txns !== this.props.txns) {\n            this.setState({\n                txns: this.props.txns\n            })\n        }\n    }\n\n    render() {\n        let { txns } = this.props\n        return (\n            <Container fluid>\n                <div>\n                <hr />\n                <Header as='h1'>Find yourself on the Leaderboard</Header>\n                <Table color={'orange'} striped padded size={'small'}>\n                    <Table.Header >\n                        <Table.Row >\n                            <Table.HeaderCell><Header as='h3'>Rank</Header></Table.HeaderCell>\n                            <Table.HeaderCell><Header as='h3'>Address</Header></Table.HeaderCell>\n                            <Table.HeaderCell><Header as='h3'>Value</Header></Table.HeaderCell>\n                            {/* <Table.HeaderCell><Header as='h3'>USD</Header></Table.HeaderCell> */}\n                            <Table.HeaderCell><Header as='h3'>Message</Header></Table.HeaderCell>\n                            <Table.HeaderCell><Header as='h3'>Tx Link</Header></Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {txns.map(item => (\n                            <Table.Row key={item.from}>\n                                <Table.Cell><Header as='h4'>{item.rank}</Header></Table.Cell>\n                                <Table.Cell><Header as='h4'>{item.from}</Header></Table.Cell>\n                                <Table.Cell><Header as='h4'>{`${parseFloat(item.value).toPrecision(3)} ${item.currency}`}</Header>\n                                <Header as='h4'>{`${parseFloat(item.usd_value)} USD`}</Header></Table.Cell>\n                                <Table.Cell>\n                                    <Header as='h4'>\n                                        <Emojify>\n                                            {item.input.length &&\n                                            this.hex_to_ascii(item.input)}\n                                        </Emojify>\n                                    </Header>\n                                </Table.Cell>\n                                <Table.Cell>\n                                    <Header as='h4'>        \n                                        {item.hash.map((txHash, index) => (\n                                            <a\n                                            key={index}\n                                            href={\"https://etherscan.io/tx/\" + txHash}\n                                            >\n                                            [{index + 1}]\n                                            </a>\n                                        ))}\n                                    </Header>\n                                </Table.Cell>\n                            </Table.Row>\n                        ))}\n                    </Table.Body>\n                </Table>\n                </div>\n            </Container>\n        )\n    }\n}\n\nexport default Leaderboard","import React, { Component } from 'react'\nimport { Grid, Header, Segment } from 'semantic-ui-react'\n\nclass Totals extends Component {\n\n    render() {\n        const { eth, ltc, btc } = this.props.totals\n        const { ETH, LTC, BTC } = this.props.prices\n        return (\n            <div>\n            <Segment inverted color='orange' textAlign='center'><Header as='h2'>Amounts Donated</Header></Segment>\n            <Grid>\n                <Grid.Column width={6}>\n                    <Header as='h2'>\n                        Total ETH: {eth}\n                    </Header>\n                    <Header as='h2'>\n                        {parseFloat(ETH * eth).toFixed(2)} USD\n                    </Header>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Header as='h2'>\n                        Total BTC: {btc}\n                    </Header>\n                    <Header as='h2'>\n                        {parseFloat(BTC * btc).toFixed(2)} USD\n                    </Header>\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Header as='h2'>\n                        Total LTC: {ltc}\n                    </Header>\n                    <Header as='h2'>\n                        {parseFloat(LTC * ltc).toFixed(2)} USD\n                    </Header>\n                </Grid.Column>\n            </Grid>\n            </div>\n        )\n    }\n}\n\nexport default Totals","import React, { Component } from 'react';\nimport './App.css';\nimport './semantic/dist/semantic.min.css'\nimport { Container } from 'semantic-ui-react'\n\n\nimport Welcome from './components/Welcome'\nimport CryptoContainer from './containers/CryptoContainer'\n\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container className='App-header'>\n          <Welcome />\n          <CryptoContainer />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}